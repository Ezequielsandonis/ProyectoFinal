@using TucConnect.Models.Models.ViewModels
@using Microsoft.AspNetCore.SignalR
@model ChatViewModel

@{
    ViewData["Title"] = "Chat";
}

@*Validar que no haya errores*@
@if (ViewBag.Error != null)
{
    <div class="alert-danger" role="alert">
        @ViewBag.Error
    </div>
}





<div class="chat-container">
    <div class="chat-view">
        <div id="chat-messages">
            @if (Model.Messages != null && Model.Messages.Any())
            {
                @foreach (var message in Model.Messages)
                {
                    <div class="message">
                        <strong>@message.UserId</strong>: @message.Message
                        <span class="timestamp">@message.CreatedAt.ToLocalTime()</span>
                    </div>
                }
            }
            else
            {
                <div class="no-messages">
                    Sin mensajes, empieza a chatear!
                </div>
            }
        </div>
        <form id="send-message-form" method="post" asp-action="SendMessage" asp-controller="Chat">
            <input type="hidden" id="ChannelUrl" name="ChannelUrl" value="@Model.ChannelUrl" />
            <textarea id="Message" name="Message" required></textarea>
            <button type="submit">Send</button>
        </form>
    </div>
</div>


<style>
    .chat-container {
        display: flex;
        height: 100vh;
    }

    .chat-view {
        width: 100%;
        display: flex;
        flex-direction: column;
    }

    #chat-messages {
        flex: 1;
        padding: 20px;
        overflow-y: scroll;
    }

    .message {
        margin-bottom: 10px;
    }

    .timestamp {
        font-size: 0.8em;
        color: #888;
    }

    #send-message-form {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ccc;
    }

        #send-message-form textarea {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            resize: none;
        }

        #send-message-form button {
            margin-left: 10px;
            padding: 10px 20px;
            border: none;
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
            border-radius: 5px;
        }
</style>

@section scripts {
    <script src="@Url.Content("https://cdn.jsdelivr.net/npm/@microsoft/signalr@5.0.0/dist/browser/signalr.min.js")"></script>

    <script>
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub") // Ruta del Hub de SignalR
            .build();

        connection.start().then(function () {
            console.log("SignalR connection established.");
        }).catch(function (err) {
            return console.error(err.toString());
        });

        connection.on("ReceiveMessage", function (channelUrl, message) {
            // Agregar el nuevo mensaje a la lista de mensajes en la vista
            var encodedMsg = message;
            var messageElement = document.createElement("div");
            messageElement.classList.add("message");
            messageElement.innerHTML = `<strong>${channelUrl}</strong>: ${encodedMsg}`;
            document.getElementById("chat-messages").appendChild(messageElement);
        });

        document.getElementById("send-message-form").addEventListener("submit", function (event) {
            var messageInput = document.getElementById("Message");
            var message = messageInput.value;
            var channelUrl = '@Model.ChannelUrl';

            connection.invoke("SendMessageToClients", channelUrl, message).catch(function (err) {
                return console.error(err.toString());
            });

            messageInput.value = '';
            event.preventDefault();
        });
    </script>
}